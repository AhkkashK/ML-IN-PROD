name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - develop
      - staging
      - production

jobs:
  integration-tests:
    if: github.event_name == 'pull_request' && github.base_ref == 'develop'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build and Run Tests
        env:
          MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
        run: |
          docker-compose --env-file .env run --rm backend pytest /app/tests/integration_test.py

      - name: Debug - List test files in container
        run: |
          docker-compose --env-file .env run --rm backend ls -la /app/tests

  staging-tests:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d

      - name: Wait for services to be ready
        run: |
          npx wait-on http://localhost:3000 http://localhost:8000

      - name: Run backend tests
        run: |
          docker-compose --env-file .env run --rm backend pytest /app/tests/unit_test.py

      - name: Run Cypress end-to-end tests
        run: |
          cd tests/cypress
          npx cypress run

      - name: Stop services
        if: always()
        run: |
          docker-compose down

  build-and-deploy:
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker build -t my-app-backend:latest ./backend
          docker build -t my-app-frontend:latest ./frontend
          docker tag my-app-backend:latest ${{ secrets.DOCKER_USERNAME }}/my-app-backend:latest
          docker tag my-app-frontend:latest ${{ secrets.DOCKER_USERNAME }}/my-app-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app-frontend:latest
