name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - develop
      - staging
      - production

jobs:
  integration-tests:
    if: github.event_name == 'pull_request' && github.base_ref == 'develop'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose version 

      - name: Run integration tests
        env:
          PYTHONPATH: /app  
        run: |
          docker-compose run --rm backend pytest /app/tests/integration_test.py

  staging-tests:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose version  # Vérifie que Docker Compose est bien installé

      - name: Start services with Docker Compose
        env:
          PYTHONPATH: /app  
        run: |
          docker-compose up -d --build

      - name: Wait for services to be ready
        run: |
          npx wait-on http://localhost:3000 http://localhost:8000

      - name: Run unit tests
        env:
          PYTHONPATH: /app  
        run: |
          docker-compose exec backend pytest /app/tests/unit_test.py

      - name: Run Cypress end-to-end tests
        run: |
          cd tests/cypress
          npx cypress run

      - name: Stop services
        if: always()
        run: |
          docker-compose down --remove-orphans

  production-deploy:
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose version

      - name: Deploy to Production
        env:
          PYTHONPATH: /app  
        run: |
          docker-compose up -d --build
